<?xml version="1.0"?><!--
  ~ BSD 3-Clause License
  ~
  ~ Copyright 2018  Sage Bionetworks. All rights reserved.
  ~
  ~ Redistribution and use in source and binary forms, with or without modification,
  ~ are permitted provided that the following conditions are met:
  ~
  ~ 1.  Redistributions of source code must retain the above copyright notice, this
  ~ list of conditions and the following disclaimer.
  ~
  ~ 2.  Redistributions in binary form must reproduce the above copyright notice,
  ~ this list of conditions and the following disclaimer in the documentation and/or
  ~ other materials provided with the distribution.
  ~
  ~ 3.  Neither the name of the copyright holder(s) nor the names of any contributors
  ~ may be used to endorse or promote products derived from this software without
  ~ specific prior written permission. No license is granted to the trademarks of
  ~ the copyright holders even if such marks are included in this software.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ~ ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <property name="charset" value="UTF-8" />

    <property name="severity" value="error" />

    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>
        <module name="OneTopLevelClass" />
        <module name="NoLineWrap" />

        <!-- Imports -->

        <module name="RedundantImport">
            <property name="severity" value="error" />
        </module>

        <module name="AvoidStarImport">
            <property name="severity" value="error" />
        </module>

        <!-- General Code Style -->

        <module name="LineLength">
            <property name="max" value="118" />
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
        </module>

        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>
        <module name="NeedBraces" />
        <module name="LeftCurly" />
        <module name="RightCurly">
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="1" />
            <property name="allowedAbbreviations" value="UUID,UI"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder" />
        <module name="VariableDeclarationUsageDistance" />
        <module name="MethodParamPad" />
        <module name="NoFinalizer" />
        <module name="OneStatementPerLine" />
        <module name="MultipleVariableDeclarations" />
        <module name="ArrayTypeStyle" />
        <module name="MissingSwitchDefault" />
        <module name="FallThrough" />
        <module name="ModifierOrder" />
        <module name="UpperEll" />

        <module name="ParenPad" />
        <module name="OperatorWrap">
            <property name="option" value="NL" />
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>

        <!--This check is problematic with lambda until https://github.com/checkstyle/checkstyle/issues/3342-->
        <!--is fixed. So let's re-enable it if that ever gets fixed (if anyone is-->
        <!--willing to contribute a PR...). Our IDE do a good job of giving us-->
        <!--reasonable indentation anyway.-->
        <!--<module name="Indentation">-->
        <!--<property name="basicOffset" value="4" />-->
        <!--<property name="braceAdjustment" value="0" />-->
        <!--<property name="caseIndent" value="4" />-->
        <!--<property name="throwsIndent" value="4" />-->
        <!--<property name="lineWrappingIndentation" value="8" />-->
        <!--<property name="arrayInitIndent" value="2" />-->
        <!--</module>-->

        <!-- White Space -->

        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="false" />
            <property name="allowEmptyTypes" value="false" />
            <property name="allowEmptyLoops" value="false" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
            <property name="severity" value="error" />
        </module>

        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <module name="NonEmptyAtclauseDescription" />
        <module name="JavadocTagContinuationIndentation" />
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
        </module>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="allowMissingPropertyJavadoc" value="true" />
            <property name="minLineCount" value="2" />
            <property name="allowedAnnotations" value="Override, Test" />
            <property name="allowThrowsTagsForSubclasses" value="true" />
            <property name="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF" />
            <property name="ignoreMethodNamesRegex" value="^typeAdapter$"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapEllipsis" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapArrayDeclarator" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>
        <!-- Naming -->
        <module name="PackageName">
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>

    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${checkstyleSuppressionsPath}" />
    </module>

</module>